type Query {
  smsHistory(
    limit: Int
    offset: Int
    userId: ID
    status: String
    search: String
    segmentId: ID
  ): [SMSHistory!]! # Added status, search, segmentId filters
  smsHistoryCount(
    userId: ID
    status: String
    search: String
    segmentId: ID
  ): Int! # Added status, search, segmentId filters
  test: String!
  hello: String!
  segmentsForSMS: [Segment!]!
  users(limit: Int, offset: Int, search: String): [User!]! # Added limit, offset, search
  user(id: ID!): User
  userByUsername(username: String!): User
  verifyToken(token: String!): TokenVerificationResult!
  me: User
  dashboardStats: DashboardStats!

  # Contact queries
  contacts(limit: Int, offset: Int, search: String, groupId: ID): [Contact!]! # Added search and groupId filters
  contact(id: ID!): Contact
  searchContacts(query: String!, limit: Int, offset: Int): [Contact!]! # This might become redundant or be merged with contacts query
  contactsCount(search: String, groupId: ID): Int! # Added search and groupId filters
  # Contact Group queries
  contactGroups(limit: Int, offset: Int): [ContactGroup!]!
  contactGroup(id: ID!): ContactGroup
  contactGroupsCount: Int!
  contactsInGroup(groupId: ID!, limit: Int, offset: Int): [Contact!]!
  contactsInGroupCount(groupId: ID!): Int!
  groupsForContact(contactId: ID!): [ContactGroup!]! # Query to get groups for a contact
  
  # WhatsApp queries
  getWhatsAppMessages(
    limit: Int
    offset: Int
    phoneNumber: String
    status: String
    type: String
    direction: String
  ): WhatsAppMessagesResult!
  getWhatsAppUserTemplates: [WhatsAppUserTemplate!]!
}

type Segment {
  id: ID!
  name: String!
  description: String
  phoneNumberCount: Int!
}

type Mutation {
  sendSms(phoneNumber: String!, message: String!, userId: ID): SMSResult!
  sendBulkSms(
    phoneNumbers: [String!]!
    message: String!
    userId: ID
  ): BulkSMSResult!
  sendSmsToSegment(
    segmentId: ID!
    message: String!
    userId: ID
  ): SegmentSMSResult!
  sendSmsToAllContacts(message: String!): BulkSMSResult! # Nouvelle mutation
  retrySms(id: ID!, userId: ID): SMSResult!
  createUser(
    username: String!
    password: String!
    email: String
    smsCredit: Int
    smsLimit: Int
    isAdmin: Boolean
  ): User!
  updateUser(id: ID!, email: String, smsLimit: Int, isAdmin: Boolean): User!
  changePassword(id: ID!, newPassword: String!): User!
  addCredits(id: ID!, amount: Int!): User!
  deleteUser(id: ID!): Boolean!

  # Mutations d'authentification
  login(username: String!, password: String!): Boolean! # Changed return type to Boolean! for testing
  refreshToken(token: String!): AuthPayload! # Keep this for now, might need adjustment later
  logout: Boolean!

  # Mutations de sécurité
  requestPasswordReset(email: String!): Boolean!
  resetPassword(token: String!, newPassword: String!): Boolean!

  # Contact mutations
  createContact(
    name: String!
    phoneNumber: String!
    email: String
    notes: String
    groupIds: [ID!] # Add group IDs argument
  ): Contact!
  updateContact(
    id: ID!
    name: String!
    phoneNumber: String!
    email: String
    notes: String
    groupIds: [ID!] # Add group IDs argument
  ): Contact!
  deleteContact(id: ID!): Boolean!

  # Contact Group mutations
  createContactGroup(name: String!, description: String): ContactGroup!
  updateContactGroup(id: ID!, name: String, description: String): ContactGroup!
  deleteContactGroup(id: ID!): Boolean!
  addContactToGroup(contactId: ID!, groupId: ID!): ContactGroupMembership!
  removeContactFromGroup(contactId: ID!, groupId: ID!): Boolean!
  addContactsToGroup(
    contactIds: [ID!]!
    groupId: ID!
  ): AddContactsToGroupResult!
  
  # WhatsApp mutations
  sendWhatsAppMessage(message: WhatsAppMessageInput!): WhatsAppMessageHistory!
  sendWhatsAppTemplate(template: WhatsAppMessageInput!): WhatsAppMessageHistory!
}

type SMSHistory {
  id: ID!
  phoneNumber: String!
  message: String!
  status: String!
  messageId: String
  errorMessage: String
  senderAddress: String
  senderName: String
  createdAt: String!
  sentAt: String
  deliveredAt: String
  failedAt: String
  segment: SegmentInfo
  userId: ID
}

type SMSResult {
  id: ID!
  phoneNumber: String!
  message: String!
  status: String!
  createdAt: String!
}

type BulkSMSResult {
  status: String!
  message: String!
  summary: SMSSummary!
  results: [SMSDetailResult!]!
}

type SegmentSMSResult {
  status: String!
  message: String!
  segment: SegmentInfo
  summary: SMSSummary!
  results: [SMSDetailResult!]!
}

type SegmentInfo {
  id: ID!
  name: String!
}

type SMSSummary {
  total: Int!
  successful: Int!
  failed: Int!
}

type SMSDetailResult {
  phoneNumber: String!
  status: String!
  message: String!
}

type User {
  id: ID # Changed from ID! to ID (nullable)
  username: String!
  email: String
  smsCredit: Int!
  smsLimit: Int
  createdAt: String!
  updatedAt: String!
  isAdmin: Boolean!
  apiKey: String
}

type DashboardStats {
  usersCount: Int!
  totalSmsCredits: Int!
  lastUpdated: String!
}

# Types pour l'authentification
type AuthPayload { # Restored for refreshToken mutation
  # token: String! # Still removed, relying on session cookie
  user: User!
}

type TokenVerificationResult {
  valid: Boolean!
  user: User
  error: String
}

# Type pour les contacts
type Contact {
  id: ID!
  name: String!
  phoneNumber: String!
  email: String
  notes: String
  createdAt: String!
  updatedAt: String!
  groups: [ContactGroup!] # Added field for contact groups
  # New fields for SMS history and score
  smsHistory: [SMSHistory!] # List of SMS sent to this number
  smsTotalCount: Int! # Total number of SMS sent to this number
  smsSentCount: Int! # Number of SENT SMS to this number
  smsFailedCount: Int! # Number of FAILED SMS to this number
  smsScore: Float! # Score based on the SENT / Total ratio
}

# Type for Contact Groups
type ContactGroup {
  id: ID!
  userId: ID!
  name: String!
  description: String
  createdAt: String!
  updatedAt: String!
  contactCount: Int! # Added field for number of contacts
}

# Type for Contact Group Membership
type ContactGroupMembership {
  id: ID!
  contact: Contact!
  group: ContactGroup!
  createdAt: String!
}

# Type for result of adding multiple contacts to a group
type AddContactsToGroupResult {
  status: String! # e.g., 'success', 'partial'
  message: String!
  successful: Int!
  failed: Int!
  memberships: [ContactGroupMembership!]! # Memberships successfully created
  errors: [AddContactsToGroupError!] # Errors encountered
}

type AddContactsToGroupError {
  contactId: ID!
  message: String!
}

# WhatsApp Types
type WhatsAppMessageHistory {
  id: ID
  wabaMessageId: String
  phoneNumber: String!
  direction: String!
  type: String!
  content: String
  status: String!
  errorCode: Int
  errorMessage: String
  timestamp: String!
  messageId: String
  contactPhone: String
  queueId: String
  sentAt: String
  deliveredAt: String
  readAt: String
  conversationId: String
  pricingCategory: String
  mediaId: String
  templateName: String
  templateLanguage: String
  contextData: String
  createdAt: String!
  updatedAt: String
}

type WhatsAppMessagesResult {
  messages: [WhatsAppMessageHistory!]!
  totalCount: Int!
  hasMore: Boolean!
}

input WhatsAppMessageInput {
  recipient: String!
  type: String!
  content: String
  mediaUrl: String
  templateName: String
  languageCode: String
  components: [TemplateComponent]
}

input TemplateComponent {
  type: String!
  parameters: [ComponentParameter]
}  

input ComponentParameter {
  type: String!
  text: String
  image: ImageParameter
}

input ImageParameter {
  link: String!
}

type WhatsAppUserTemplate {
  id: ID!
  template_id: String!
  name: String!
  language: String!
  status: String!
}