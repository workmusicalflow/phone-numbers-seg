type Query {
  smsHistory(limit: Int, offset: Int): [SMSHistory!]!
  smsHistoryCount: Int!
  test: String!
  hello: String!
  segmentsForSMS: [Segment!]!
  users: [User!]!
  user(id: ID!): User
  userByUsername(username: String!): User
  verifyToken(token: String!): TokenVerificationResult!
  me: User
}

type Segment {
  id: ID!
  name: String!
  description: String
  phoneNumberCount: Int!
}

type Mutation {
  sendSms(phoneNumber: String!, message: String!): SMSResult!
  sendBulkSms(phoneNumbers: [String!]!, message: String!): BulkSMSResult!
  sendSmsToSegment(segmentId: ID!, message: String!): SegmentSMSResult!
  retrySms(id: ID!): SMSResult!
  createUser(
    username: String!
    password: String!
    email: String
    smsCredit: Int
    smsLimit: Int
  ): User!
  updateUser(id: ID!, email: String, smsLimit: Int): User!
  changePassword(id: ID!, newPassword: String!): User!
  addCredits(id: ID!, amount: Int!): User!
  deleteUser(id: ID!): Boolean!

  # Mutations d'authentification
  login(username: String!, password: String!): AuthPayload!
  refreshToken(token: String!): AuthPayload!
  logout: Boolean!

  # Mutations de sécurité
  requestPasswordReset(email: String!): Boolean!
  resetPassword(token: String!, newPassword: String!): Boolean!
}

type SMSHistory {
  id: ID!
  phoneNumber: String!
  message: String!
  status: String!
  messageId: String
  errorMessage: String
  senderAddress: String
  senderName: String
  createdAt: String!
  segment: SegmentInfo
}

type SMSResult {
  id: ID!
  phoneNumber: String!
  message: String!
  status: String!
  createdAt: String!
}

type BulkSMSResult {
  status: String!
  message: String!
  summary: SMSSummary!
  results: [SMSDetailResult!]!
}

type SegmentSMSResult {
  status: String!
  message: String!
  segment: SegmentInfo
  summary: SMSSummary!
  results: [SMSDetailResult!]!
}

type SegmentInfo {
  id: ID!
  name: String!
}

type SMSSummary {
  total: Int!
  successful: Int!
  failed: Int!
}

type SMSDetailResult {
  phoneNumber: String!
  status: String!
  message: String!
}

type User {
  id: ID!
  username: String!
  email: String
  smsCredit: Int!
  smsLimit: Int
  createdAt: String!
  updatedAt: String!
  isAdmin: Boolean!
}

# Types pour l'authentification
type AuthPayload {
  token: String!
  user: User!
}

type TokenVerificationResult {
  valid: Boolean!
  user: User
  error: String
}
