type Query {
  smsHistory(limit: Int, offset: Int, userId: ID): [SMSHistory!]!
  smsHistoryCount(userId: ID): Int!
  test: String!
  hello: String!
  segmentsForSMS: [Segment!]!
  users: [User!]!
  user(id: ID!): User
  userByUsername(username: String!): User
  verifyToken(token: String!): TokenVerificationResult!
  me: User
  dashboardStats: DashboardStats!

  # Contact queries
  contacts(limit: Int, offset: Int): [Contact!]!
  contact(id: ID!): Contact
  searchContacts(query: String!, limit: Int, offset: Int): [Contact!]!
  contactsCount: Int!

  # Contact Group queries
  contactGroups(limit: Int, offset: Int): [ContactGroup!]!
  contactGroup(id: ID!): ContactGroup
  contactGroupsCount: Int!
  contactsInGroup(groupId: ID!, limit: Int, offset: Int): [Contact!]!
  contactsInGroupCount(groupId: ID!): Int!
}

type Segment {
  id: ID!
  name: String!
  description: String
  phoneNumberCount: Int!
}

type Mutation {
  sendSms(phoneNumber: String!, message: String!, userId: ID): SMSResult!
  sendBulkSms(
    phoneNumbers: [String!]!
    message: String!
    userId: ID
  ): BulkSMSResult!
  sendSmsToSegment(
    segmentId: ID!
    message: String!
    userId: ID
  ): SegmentSMSResult!
  sendSmsToAllContacts(message: String!): BulkSMSResult! # Nouvelle mutation
  retrySms(id: ID!, userId: ID): SMSResult!
  createUser(
    username: String!
    password: String!
    email: String
    smsCredit: Int
    smsLimit: Int
    isAdmin: Boolean
  ): User!
  updateUser(id: ID!, email: String, smsLimit: Int, isAdmin: Boolean): User!
  changePassword(id: ID!, newPassword: String!): User!
  addCredits(id: ID!, amount: Int!): User!
  deleteUser(id: ID!): Boolean!

  # Mutations d'authentification
  login(username: String!, password: String!): Boolean! # Changed return type to Boolean! for testing
  refreshToken(token: String!): AuthPayload! # Keep this for now, might need adjustment later
  logout: Boolean!

  # Mutations de sécurité
  requestPasswordReset(email: String!): Boolean!
  resetPassword(token: String!, newPassword: String!): Boolean!

  # Contact mutations
  createContact(
    name: String!
    phoneNumber: String!
    email: String
    notes: String
  ): Contact!
  updateContact(
    id: ID!
    name: String!
    phoneNumber: String!
    email: String
    notes: String
  ): Contact!
  deleteContact(id: ID!): Boolean!

  # Contact Group mutations
  createContactGroup(name: String!, description: String): ContactGroup!
  updateContactGroup(id: ID!, name: String, description: String): ContactGroup!
  deleteContactGroup(id: ID!): Boolean!
  addContactToGroup(contactId: ID!, groupId: ID!): ContactGroupMembership!
  removeContactFromGroup(contactId: ID!, groupId: ID!): Boolean!
  addContactsToGroup(
    contactIds: [ID!]!
    groupId: ID!
  ): AddContactsToGroupResult!
}

type SMSHistory {
  id: ID!
  phoneNumber: String!
  message: String!
  status: String!
  messageId: String
  errorMessage: String
  senderAddress: String
  senderName: String
  createdAt: String!
  segment: SegmentInfo
  userId: ID
}

type SMSResult {
  id: ID!
  phoneNumber: String!
  message: String!
  status: String!
  createdAt: String!
}

type BulkSMSResult {
  status: String!
  message: String!
  summary: SMSSummary!
  results: [SMSDetailResult!]!
}

type SegmentSMSResult {
  status: String!
  message: String!
  segment: SegmentInfo
  summary: SMSSummary!
  results: [SMSDetailResult!]!
}

type SegmentInfo {
  id: ID!
  name: String!
}

type SMSSummary {
  total: Int!
  successful: Int!
  failed: Int!
}

type SMSDetailResult {
  phoneNumber: String!
  status: String!
  message: String!
}

type User {
  id: ID # Changed from ID! to ID (nullable)
  username: String!
  email: String
  smsCredit: Int!
  smsLimit: Int
  createdAt: String!
  updatedAt: String!
  isAdmin: Boolean!
}

type DashboardStats {
  usersCount: Int!
  totalSmsCredits: Int!
  lastUpdated: String!
}

# Types pour l'authentification
type AuthPayload { # Restored for refreshToken mutation
  # token: String! # Still removed, relying on session cookie
  user: User!
}

type TokenVerificationResult {
  valid: Boolean!
  user: User
  error: String
}

# Type pour les contacts
type Contact {
  id: ID!
  name: String!
  phoneNumber: String!
  email: String
  notes: String
  createdAt: String!
  updatedAt: String!
}

# Type for Contact Groups
type ContactGroup {
  id: ID!
  userId: ID!
  name: String!
  description: String
  createdAt: String!
  updatedAt: String!
  contactCount: Int! # Added field for number of contacts
}

# Type for Contact Group Membership
type ContactGroupMembership {
  id: ID!
  contact: Contact!
  group: ContactGroup!
  createdAt: String!
}

# Type for result of adding multiple contacts to a group
type AddContactsToGroupResult {
  status: String! # e.g., 'success', 'partial'
  message: String!
  successful: Int!
  failed: Int!
  memberships: [ContactGroupMembership!]! # Memberships successfully created
  errors: [AddContactsToGroupError!] # Errors encountered
}

type AddContactsToGroupError {
  contactId: ID!
  message: String!
}
