<template>
  <q-dialog
    v-model="showDialog"
    persistent
    maximized
    transition-show="slide-up"
    transition-hide="slide-down"
  >
    <q-card>
      <q-bar class="bg-primary text-white">
        <div class="text-h6">Envoyer un message template WhatsApp</div>
        <q-space />
        <q-btn dense flat icon="close" @click="closeDialog" />
      </q-bar>

      <q-card-section class="q-pa-md">
        <div class="row q-col-gutter-md">
          <!-- Informations du destinataire -->
          <div class="col-12 col-md-4">
            <q-card flat bordered>
              <q-card-section>
                <div class="text-h6">Destinataire</div>
                <div v-if="contactInfo" class="q-mt-sm">
                  <p class="text-body1 q-mb-xs">{{ contactInfo.name }}</p>
                  <p class="text-body2 q-mb-none">
                    <q-icon name="phone" size="xs" />
                    {{ contactInfo.phoneNumber }}
                  </p>
                  <p v-if="contactInfo.email" class="text-body2 q-mb-none">
                    <q-icon name="email" size="xs" />
                    {{ contactInfo.email }}
                  </p>
                </div>
                <div v-else>
                  <p>{{ formatPhoneNumber(contactPhoneNumber) }}</p>
                </div>
              </q-card-section>

              <q-card-section v-if="contactInfo && contactInfo.isWhatsappVerified" class="bg-positive-light">
                <div class="row items-center">
                  <q-icon name="check_circle" color="positive" size="sm" class="q-mr-sm" />
                  <span>Numéro vérifié pour WhatsApp</span>
                </div>
              </q-card-section>

              <q-card-section v-else-if="contactInfo && !contactInfo.isWhatsappVerified" class="bg-negative-light">
                <div class="row items-center">
                  <q-icon name="warning" color="warning" size="sm" class="q-mr-sm" />
                  <span>Numéro non vérifié pour WhatsApp</span>
                </div>
              </q-card-section>
            </q-card>
          </div>

          <!-- Sélection et configuration du template -->
          <div class="col-12 col-md-8">
            <q-form @submit="sendMessage" class="q-gutter-md">
              <q-card flat bordered class="bg-grey-1">
                <q-card-section>
                  <div class="text-h6">Sélectionner un template</div>
                  
                  <div class="q-mt-md" v-if="isLoadingTemplates">
                    <q-spinner color="primary" />
                    <span class="q-ml-sm">Chargement des templates...</span>
                  </div>

                  <div v-else-if="userTemplates.length === 0">
                    <q-banner class="bg-orange-1" dense>
                      <template v-slot:avatar>
                        <q-icon name="warning" color="warning" />
                      </template>
                      <span v-if="whatsappUserTemplateStore.error">
                        Impossible de charger vos templates WhatsApp. Veuillez réessayer dans quelques instants.
                        <q-btn flat dense size="sm" color="secondary" icon="refresh" label="Réessayer" @click="retryLoadTemplates" class="q-ml-sm" />
                      </span>
                      <span v-else>
                        Vous n'avez pas encore ajouté de références de templates WhatsApp.
                      </span>
                      <template v-slot:action>
                        <q-btn flat color="primary" label="Gérer les templates" @click="goToTemplatesPage" />
                      </template>
                    </q-banner>
                  </div>

                  <div v-else>
                    <q-select
                      v-model="selectedTemplate"
                      :options="userTemplates"
                      option-label="templateName"
                      option-value="id"
                      label="Template WhatsApp"
                      emit-value
                      map-options
                      :rules="[val => !!val || 'Veuillez sélectionner un template']"
                    >
                      <template v-slot:option="scope">
                        <q-item v-bind="scope.itemProps">
                          <q-item-section>
                            <q-item-label>{{ scope.opt.templateName }}</q-item-label>
                            <q-item-label caption>{{ scope.opt.languageCode }}</q-item-label>
                          </q-item-section>
                        </q-item>
                      </template>
                    </q-select>
                  </div>
                </q-card-section>
              </q-card>

              <div v-if="selectedTemplateObject">
                <q-card flat bordered class="bg-grey-1 q-mt-md">
                  <q-card-section>
                    <div class="text-h6">Paramètres du template</div>
                    <p class="text-caption q-mb-md">
                      Remplissez les paramètres requis pour le template
                      {{ selectedTemplateObject.templateName }}
                      ({{ selectedTemplateObject.languageCode }}).
                    </p>

                    <!-- En-tête média (si nécessaire) -->
                    <div v-if="selectedTemplateObject.hasHeaderMedia" class="q-mb-md">
                      <div class="text-subtitle2 q-mb-sm">Image d'en-tête</div>
                      <q-input
                        v-model="headerMediaUrl"
                        label="URL de l'image d'en-tête"
                        :rules="[
                          val => !selectedTemplateObject.hasHeaderMedia || !!val || 'L\'URL de l\'image est requise pour ce template',
                          val => !val || isValidUrl(val) || 'Veuillez entrer une URL valide'
                        ]"
                      />
                    </div>

                    <!-- Variables de corps (nombre dynamique) -->
                    <div v-if="bodyVariablesFields.length > 0" class="q-mb-md">
                      <div class="text-subtitle2 q-mb-sm">Variables du corps</div>
                      <div 
                        v-for="(field, index) in bodyVariablesFields" 
                        :key="index"
                        class="q-mb-sm"
                      >
                        <q-input
                          v-model="field.value"
                          :label="`Variable ${index + 1}`"
                          :rules="[val => !!val || 'Cette variable est requise']"
                        />
                      </div>
                    </div>

                    <!-- Message d'information si aucun paramètre -->
                    <div v-if="!selectedTemplateObject.hasHeaderMedia && bodyVariablesFields.length === 0">
                      <q-banner class="bg-info-light" dense>
                        <template v-slot:avatar>
                          <q-icon name="info" color="info" />
                        </template>
                        Ce template ne nécessite pas de paramètres supplémentaires.
                      </q-banner>
                    </div>
                  </q-card-section>
                </q-card>
              </div>

              <div class="q-mt-md flex justify-end">
                <q-btn flat label="Annuler" color="negative" @click="closeDialog" class="q-mr-sm" />
                <q-btn
                  type="submit"
                  label="Envoyer le message"
                  color="primary"
                  :loading="isSending"
                  :disable="!selectedTemplate || userTemplates.length === 0"
                />
              </div>
            </q-form>
          </div>
        </div>
      </q-card-section>
    </q-card>
  </q-dialog>
</template>

<script setup lang="ts">
import { ref, computed, watch, onMounted } from 'vue';
import { useQuasar } from 'quasar';
import { useRouter } from 'vue-router';
import { useWhatsAppUserTemplateStore } from '@/stores/whatsappUserTemplateStore';
import { useAuthStore } from '@/stores/authStore';
import { injectEmergencyTemplates } from './emergency-templates';
import { loadTemplatesWithFallback } from './retry-templates-loader';

// Props et événements
interface Props {
  modelValue: boolean;
  contactPhoneNumber: string;
  contactInfo?: {
    id?: string;
    name: string;
    phoneNumber: string;
    email?: string;
    isWhatsappEnabled?: boolean;
    isWhatsappVerified?: boolean;
  };
}

const props = withDefaults(defineProps<Props>(), {
  modelValue: false,
  contactPhoneNumber: '',
});

const emit = defineEmits(['update:modelValue', 'sent', 'error']);

// Services et stores
const $q = useQuasar();
const router = useRouter();
const whatsappUserTemplateStore = useWhatsAppUserTemplateStore();
const authStore = useAuthStore();

// État local
const showDialog = ref(props.modelValue);
const selectedTemplate = ref<string | null>(null);
const headerMediaUrl = ref('');
const bodyVariablesFields = ref<{ index: number; value: string }[]>([]);
const isLoadingTemplates = ref(false);
const isSending = ref(false);

// Computed properties
const userTemplates = computed(() => whatsappUserTemplateStore.templates);

const selectedTemplateObject = computed(() => {
  if (!selectedTemplate.value) return null;
  return userTemplates.value.find(t => t.id === selectedTemplate.value) || null;
});

// Watchers
watch(() => props.modelValue, (newVal) => {
  showDialog.value = newVal;
});

watch(() => showDialog.value, (newVal) => {
  emit('update:modelValue', newVal);
});

watch(selectedTemplateObject, (newTemplate) => {
  // Réinitialiser les champs et reconstruire en fonction du template sélectionné
  headerMediaUrl.value = '';
  bodyVariablesFields.value = [];
  
  if (newTemplate) {
    // Générer les champs pour les variables de corps
    const variablesCount = newTemplate.bodyVariablesCount || 0;
    
    for (let i = 0; i < variablesCount; i++) {
      bodyVariablesFields.value.push({
        index: i,
        value: ''
      });
    }
  }
});

// Méthodes
function closeDialog() {
  showDialog.value = false;
  // Réinitialiser les champs
  selectedTemplate.value = null;
  headerMediaUrl.value = '';
  bodyVariablesFields.value = [];
}

function formatPhoneNumber(phoneNumber: string): string {
  // Simple formatting for display
  if (!phoneNumber) return '';
  
  // Si c'est déjà formaté, retourner tel quel
  if (phoneNumber.includes('+') || phoneNumber.includes('-') || phoneNumber.includes(' ')) {
    return phoneNumber;
  }
  
  // Formater les numéros CI
  if (phoneNumber.startsWith('225') && phoneNumber.length >= 12) {
    return `+${phoneNumber.substring(0, 3)} ${phoneNumber.substring(3, 5)} ${phoneNumber.substring(5, 7)} ${phoneNumber.substring(7, 9)} ${phoneNumber.substring(9)}`;
  }
  
  return phoneNumber;
}

function isValidUrl(string: string): boolean {
  try {
    new URL(string);
    return true;
  } catch (_) {
    return false;
  }
}

async function loadTemplates() {
  if (!authStore.user?.id) return;

  isLoadingTemplates.value = true;
  try {
    // Première tentative - utilisation normale
    await whatsappUserTemplateStore.fetchTemplates(authStore.user.id.toString());

    // Vérification supplémentaire après chargement
    if (whatsappUserTemplateStore.templates.length === 0 && whatsappUserTemplateStore.error) {
      console.warn('Erreur détectée lors du chargement des templates, nouvelle tentative...');
      // Deuxième tentative après une courte pause avec forceRefresh=true
      setTimeout(async () => {
        try {
          // Utiliser forceRefresh=true pour ignorer le cache
          await whatsappUserTemplateStore.fetchTemplates(
            authStore.user.id.toString(),
            true // Activer forceRefresh pour la seconde tentative
          );
          console.log('Seconde tentative de chargement des templates terminée');
        } catch (retryError) {
          console.error('Échec de la seconde tentative:', retryError);
        }
      }, 1000);
    }
  } catch (error) {
    console.error('Erreur lors du chargement des templates:', error);
  } finally {
    isLoadingTemplates.value = false;
  }
}

function goToTemplatesPage() {
  router.push('/whatsapp-templates');
  closeDialog();
}

async function retryLoadTemplates() {
  // Utiliser le module séparé pour charger les templates avec fallback robuste
  await loadTemplatesWithFallback({
    whatsappUserTemplateStore,
    authStore,
    $q,
    loadingState: isLoadingTemplates
  });
    message: 'Nouvelle tentative de chargement des templates...',
    timeout: 2000
  });

  try {
    // Utiliser forceRefresh=true pour ignorer le cache et forcer le rechargement
    await whatsappUserTemplateStore.fetchTemplates(
      authStore.user.id.toString(),
      true // Activer forceRefresh pour éviter d'utiliser les données en cache
    );

    if (whatsappUserTemplateStore.templates.length > 0) {
      $q.notify({
        type: 'positive',
        message: 'Templates WhatsApp chargés avec succès!',
        timeout: 2000
      });
    } else {
      // Si toujours vide après rechargement forcé, essayer avec le API fallback
      console.log('Templates toujours vides, tentative avec API fallback...');

      $q.notify({
        type: 'warning',
        message: 'Aucun template disponible. Tentative avec l\'API de secours...',
        timeout: 3000
      });

      // Une pause courte avant d'essayer l'API de secours (évite les requêtes trop rapides)
      setTimeout(async () => {
        try {
          // Nouvelle tentative qui utilisera le fallback si la première échoue aussi
          await whatsappUserTemplateStore.fetchTemplates(
            authStore.user.id.toString(),
            true
          );

          if (whatsappUserTemplateStore.templates.length > 0) {
            $q.notify({
              type: 'positive',
              message: 'Templates chargés depuis l\'API de secours!',
              timeout: 2000
            });
          } else {
            $q.notify({
              type: 'warning',
              message: 'Aucun template WhatsApp disponible, même via l\'API de secours.',
              timeout: 3000
            });
          }
        } catch (fallbackError) {
          console.error('Échec de l\'API de secours:', fallbackError);
        }
      }, 1000);
    }
  } catch (error) {
    console.error('Erreur lors de la nouvelle tentative:', error);
    $q.notify({
      type: 'negative',
      message: 'Impossible de charger les templates. Veuillez réessayer plus tard.',
      timeout: 3000
    });
  } finally {
    isLoadingTemplates.value = false;
  }
}

async function sendMessage() {
  if (!selectedTemplateObject.value) return;
  
  isSending.value = true;
  
  try {
    // Construire les composants
    const components: any[] = [];
    
    // Ajouter l'en-tête média si nécessaire
    if (selectedTemplateObject.value.hasHeaderMedia && headerMediaUrl.value) {
      components.push({
        type: 'header',
        parameters: [
          {
            type: 'image',
            image: {
              link: headerMediaUrl.value
            }
          }
        ]
      });
    }
    
    // Ajouter les variables du corps si nécessaire
    if (bodyVariablesFields.value.length > 0) {
      const bodyParameters = bodyVariablesFields.value.map(field => ({
        type: 'text',
        text: field.value
      }));
      
      components.push({
        type: 'body',
        parameters: bodyParameters
      });
    }
    
    // Envoyer le message
    const result = await whatsappUserTemplateStore.sendTemplateMessage({
      contactPhoneNumber: props.contactPhoneNumber,
      templateName: selectedTemplateObject.value.templateName,
      languageCode: selectedTemplateObject.value.languageCode,
      componentsJson: JSON.stringify(components)
    });
    
    if (result) {
      $q.notify({
        type: 'positive',
        message: 'Message envoyé avec succès'
      });
      
      emit('sent', {
        templateName: selectedTemplateObject.value.templateName,
        languageCode: selectedTemplateObject.value.languageCode
      });
      
      closeDialog();
    } else {
      throw new Error("Erreur lors de l'envoi du message");
    }
  } catch (error) {
    console.error('Erreur lors de l\'envoi du message:', error);
    
    $q.notify({
      type: 'negative',
      message: error instanceof Error ? error.message : "Une erreur est survenue lors de l'envoi"
    });
    
    emit('error', error);
  } finally {
    isSending.value = false;
  }
}

// Initialisation
onMounted(() => {
  loadTemplates();
});
</script>

<style scoped>
.bg-positive-light {
  background-color: rgba(33, 186, 69, 0.1);
}

.bg-negative-light {
  background-color: rgba(198, 40, 40, 0.1);
}

.bg-info-light {
  background-color: rgba(9, 132, 227, 0.1);
}

.bg-orange-1 {
  background-color: rgba(255, 152, 0, 0.1);
}
</style>