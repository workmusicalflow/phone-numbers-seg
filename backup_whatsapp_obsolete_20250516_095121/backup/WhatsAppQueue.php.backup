<?php

namespace App\Entities\WhatsApp;

use App\Entities\User;
use Doctrine\ORM\Mapping as ORM;

/**
 * EntitÃ© pour la file d'attente des messages WhatsApp
 * 
 * @ORM\Entity
 * @ORM\Table(name="whatsapp_queue")
 * @ORM\HasLifecycleCallbacks
 */
class WhatsAppQueue
{
    public const STATUS_PENDING = 'PENDING';
    public const STATUS_PROCESSING = 'PROCESSING';
    public const STATUS_SENT = 'SENT';
    public const STATUS_FAILED = 'FAILED';
    
    public const PRIORITY_LOW = 1;
    public const PRIORITY_NORMAL = 2;
    public const PRIORITY_HIGH = 3;
    public const PRIORITY_URGENT = 4;
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private int $id;
    
    /**
     * @ORM\ManyToOne(targetEntity="App\Entities\User")
     * @ORM\JoinColumn(nullable=false)
     */
    private User $oracleUser;
    
    /**
     * @ORM\Column(type="string", length=20)
     */
    private string $phoneNumber;
    
    /**
     * @ORM\Column(type="string", length=20)
     */
    private string $messageType;
    
    /**
     * @ORM\Column(type="json")
     */
    private array $payload;
    
    /**
     * @ORM\Column(type="integer")
     */
    private int $priority = self::PRIORITY_NORMAL;
    
    /**
     * @ORM\Column(type="string", length=20)
     */
    private string $status = self::STATUS_PENDING;
    
    /**
     * @ORM\Column(type="integer")
     */
    private int $retryCount = 0;
    
    /**
     * @ORM\Column(type="integer")
     */
    private int $maxRetries = 3;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?\DateTime $scheduledAt = null;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?\DateTime $processedAt = null;
    
    /**
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $errorMessage = null;
    
    /**
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $wabaMessageId = null;
    
    /**
     * @ORM\Column(type="datetime")
     */
    private \DateTime $createdAt;
    
    /**
     * @ORM\Column(type="datetime")
     */
    private \DateTime $updatedAt;
    
    public function __construct()
    {
        $this->createdAt = new \DateTime();
        $this->updatedAt = new \DateTime();
    }
    
    /**
     * @ORM\PreUpdate
     */
    public function onUpdate(): void
    {
        $this->updatedAt = new \DateTime();
    }
    
    // Getters et setters
    
    public function getId(): int
    {
        return $this->id;
    }
    
    public function getOracleUser(): User
    {
        return $this->oracleUser;
    }
    
    public function setOracleUser(User $oracleUser): self
    {
        $this->oracleUser = $oracleUser;
        return $this;
    }
    
    public function getPhoneNumber(): string
    {
        return $this->phoneNumber;
    }
    
    public function setPhoneNumber(string $phoneNumber): self
    {
        $this->phoneNumber = $phoneNumber;
        return $this;
    }
    
    public function getMessageType(): string
    {
        return $this->messageType;
    }
    
    public function setMessageType(string $messageType): self
    {
        $this->messageType = $messageType;
        return $this;
    }
    
    public function getPayload(): array
    {
        return $this->payload;
    }
    
    public function setPayload(array $payload): self
    {
        $this->payload = $payload;
        return $this;
    }
    
    public function getPriority(): int
    {
        return $this->priority;
    }
    
    public function setPriority(int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }
    
    public function getStatus(): string
    {
        return $this->status;
    }
    
    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }
    
    public function getRetryCount(): int
    {
        return $this->retryCount;
    }
    
    public function incrementRetryCount(): self
    {
        $this->retryCount++;
        return $this;
    }
    
    public function canRetry(): bool
    {
        return $this->retryCount < $this->maxRetries;
    }
    
    public function getMaxRetries(): int
    {
        return $this->maxRetries;
    }
    
    public function setMaxRetries(int $maxRetries): self
    {
        $this->maxRetries = $maxRetries;
        return $this;
    }
    
    public function getScheduledAt(): ?\DateTime
    {
        return $this->scheduledAt;
    }
    
    public function setScheduledAt(?\DateTime $scheduledAt): self
    {
        $this->scheduledAt = $scheduledAt;
        return $this;
    }
    
    public function getProcessedAt(): ?\DateTime
    {
        return $this->processedAt;
    }
    
    public function setProcessedAt(?\DateTime $processedAt): self
    {
        $this->processedAt = $processedAt;
        return $this;
    }
    
    public function getErrorMessage(): ?string
    {
        return $this->errorMessage;
    }
    
    public function setErrorMessage(?string $errorMessage): self
    {
        $this->errorMessage = $errorMessage;
        return $this;
    }
    
    public function getWabaMessageId(): ?string
    {
        return $this->wabaMessageId;
    }
    
    public function setWabaMessageId(?string $wabaMessageId): self
    {
        $this->wabaMessageId = $wabaMessageId;
        return $this;
    }
    
    public function getCreatedAt(): \DateTime
    {
        return $this->createdAt;
    }
    
    public function getUpdatedAt(): \DateTime
    {
        return $this->updatedAt;
    }
}